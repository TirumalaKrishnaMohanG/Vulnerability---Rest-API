#!/usr/bin/env python

# Headers
import sys
import json
import cowsay
import urllib3
import requests

from config import api_cwe
from config import api_cve
from config import api_last
from config import api_link
from config import base_url
from config import api_capec
from config import api_dbinfo
from config import api_browse

# Suppress URL/Request Exception
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

# Headers
default_headers = {
	'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.77 Safari/537.36'
}

# class
class circlCVE:

	# Input
	def __init__(self,base_url):
		self.base_url = base_url

	# CWE Info API
	def cwe(self,api_cwe,id):
		url = self.base_url
		getInfo = requests.get(
								url+api_cwe,
								headers = default_headers,
								verify = False,
								allow_redirects = True
							  )

		# Getting CWE Info in JSON
		if id == 'None':
			getResp = getInfo.text
		else:
			getRepo = [x for x in getInfo.json() if x.get('id') == id]
			getResp = json.dumps(getRepo, indent=2, separators=(',', ': '), sort_keys=True)

		return getResp

	# CVE Info API
	def cve(self,api_cve,cveid):
		url = self.base_url
		getInfo = requests.get(
								url+api_cve+cveid,
								headers = default_headers,
								verify=False,
								allow_redirects=True
							  )
		# Getting CVE Info
		getCve = getInfo.json()
		getResp = json.dumps(getCve, indent=2, separators=(',',':'),sort_keys=True)
		return getResp

	# Last Info API
	def last(self,api_last,value):
		url = self.base_url
		getInfo = requests.get(
								url+api_last+value,
								headers = default_headers,
								verify = False,
								allow_redirects=True
							  )
		# Getting Last recent cve
		getLastCve = getInfo.json()
		getResp = json.dumps(getLastCve, indent=2, separators=(',',':'),sort_keys=True)
		return getResp

	# Link Info API
	def link(self,api_link,key,value):
		url = self.base_url
		getInfo = requests.get(
								url+api_link+key+'/'+value,
								headers = default_headers,
								verify = False,
								allow_redirects=True
							  )
		# Getting Link Info
		getLink = getInfo.json()
		getResp = json.dumps(getLink, indent=2, separators=(',',':'),sort_keys=True)
		return getResp

	# Individual Capec Info API
	def showcapec(self,api_capec,value):
		url = self.base_url
		getInfo = requests.get(
								url+api_capec+value,
								headers = default_headers,
								verify = False,
								allow_redirects=True
							  )
		# Getting Last recent cve
		getCapec = getInfo.json()
		getResp = json.dumps(getCapec, indent=2, separators=(',',':'),sort_keys=True)
		return getResp

	# Browse Info API
	def vendor(self,api_browse,name):
		url = self.base_url
		getInfo = requests.get(
								url+api_browse+name,
								headers = default_headers,
								verify = False,
								allow_redirects=True
							  )
		# Getting based vendor
		getVendor = getInfo.json()
		getResp = json.dumps(getVendor, indent=2, separators=(',',':'),sort_keys=True)
		return getResp

	# DB Info
	def dbinfo(self,api_dbinfo):
		url = self.base_url
		getInfo = requests.get(
								url+api_dbinfo,
								headers = default_headers,
								verify = False,
								allow_redirects=True
							  )
		# Getting DB Info
		getDbinfo = getInfo.json()
		getResp = json.dumps(getDbinfo, indent=2, separators=(',',':'),sort_keys=True)
		return getResp

# Calling class with object
getCal = circlCVE(base_url)

# Input
getIn = sys.argv
getArgs = getIn[1:]
try:
	sepArgs = getIn[1]
	if sepArgs == '-c' or sepArgs == '--cwe':
		getVal = getArgs[-1]
		if getVal.isnumeric():
			print("The Requested CWE is",getVal)
			print(getCal.cwe(api_cwe,getVal))
		else:
			print("The Requested CWE is None {It will fetch all and select any }")
			print(getCal.cwe(api_cwe,'None'))
	elif sepArgs == '-cv' or sepArgs == '--cve':
		getVal = getArgs[-1]
		print('The requested CVE Id is '+getVal+'\n',getCal.cve(api_cve,getVal))
	elif sepArgs == '-l' or sepArgs == '--last':
		getVal = getArgs[-1]
		if getVal.isnumeric():
			finVal = getCal.last(api_last,getVal)
			print(finVal,"\nCount:==>The recent published CVE is:",getVal)
		else:
			finVal = getCal.last(api_last,'30')
			print(finVal,"\nCount:==>The recent published CVE is: 30")
	elif sepArgs == '-lk' or sepArgs == '--link':
		getVal = getArgs[-2:]
		key,value = getVal[0],getVal[1]
		finVal = getCal.link(api_link,key,value)
		print(finVal)
	elif sepArgs == '-cp' or sepArgs == '--capec':
		getVal = getArgs[-1]
		finVal = getCal.showcapec(api_capec,getVal)
		print('The requested CAPEC id is',getVal,'\n',finVal)
	elif sepArgs == '-v' or sepArgs == '--vendor':
		getVal = getArgs[-1]
		finVal = getCal.vendor(api_browse,getVal)
		print('The reuqested vendor search is',getVal,'\n',finVal)
	elif sepArgs == '-db' or sepArgs == '--dbinfo':
		getVal = getArgs[-1]
		finVal = getCal.dbinfo(api_dbinfo)
		print('The updated database record information is \n',finVal)
	elif sepArgs == '-h' or sepArgs == '--help':
		info = "Use the following format\n\tpython app.py -c {id eg:1 or left empty}"
		cowsay.tux('Help')
		print("Check with following options:\n\t-h : --Help --> Help Required\n\t-c : --cwe -->  Outputs a list of all CWEs (Common Weakness Enumeration).\n\t-cv : --cve -->  This information includes basic CVE information like CVSS (Common Vulnerability Scoring System), related CPE (Common Product Enumeration), CWE (Common Weakness Enumeration), ... as well as additional information (RedHat Advisories etc).\n\t-l : --last -->  Outputs the last n amount of vulnerabilities. If the limit is not specified, the default of 30 is used. \n\t-lk : --link -->  Returns all CVEs that are linked by a given key/value pair. \n\t-cp : --capec -->  Outputs a CAPEC specified by it's id and CAPEC (Common Attack Pattern Enumeration and Classification) are a list of attack types commonly used by attackers.\n\t-v : --vendor -->  Returns a list of vendors or products of a specific vendor.\n\t-db : --dbinfo -->Returns the stats of the database.")
	else:
		info = "Use the following format\n\tpython app.py -c {id eg:1 or left empty}"
		cowsay.tux('Help')
		print("Check with following options:\n\t-h : --Help --> Help Required\n\t-c : --cwe -->  Outputs a list of all CWEs (Common Weakness Enumeration).\n\t-cv : --cve -->  This information includes basic CVE information like CVSS (Common Vulnerability Scoring System), related CPE (Common Product Enumeration), CWE (Common Weakness Enumeration), ... as well as additional information (RedHat Advisories etc).\n\t-l : --last -->  Outputs the last n amount of vulnerabilities. If the limit is not specified, the default of 30 is used. \n\t-lk : --link -->  Returns all CVEs that are linked by a given key/value pair. \n\t-cp : --capec -->  Outputs a CAPEC specified by it's id and CAPEC (Common Attack Pattern Enumeration and Classification) are a list of attack types commonly used by attackers.\n\t-v : --vendor -->  Returns a list of vendors or products of a specific vendor.\n\t-db : --dbinfo -->Returns the stats of the database.")
except:
	info = "Use the following format\n\tpython app.py -c {id eg:1 or left empty}"
	cowsay.tux('Help')
	print("Check with following options:\n\t-h : --Help --> Help Required\n\t-c : --cwe -->  Outputs a list of all CWEs (Common Weakness Enumeration).\n\t-cv : --cve -->  This information includes basic CVE information like CVSS (Common Vulnerability Scoring System), related CPE (Common Product Enumeration), CWE (Common Weakness Enumeration), ... as well as additional information (RedHat Advisories etc).\n\t-l : --last -->  Outputs the last n amount of vulnerabilities. If the limit is not specified, the default of 30 is used. \n\t-lk : --link -->  Returns all CVEs that are linked by a given key/value pair. \n\t-cp : --capec -->  Outputs a CAPEC specified by it's id and CAPEC (Common Attack Pattern Enumeration and Classification) are a list of attack types commonly used by attackers.\n\t-v : --vendor -->  Returns a list of vendors or products of a specific vendor.\n\t-db : --dbinfo -->Returns the stats of the database.")